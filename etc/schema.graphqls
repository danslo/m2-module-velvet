type DashboardSales {
    lifetime_sales: String!
    average_order: String!
}

type DashboardLastOrder {
    customer_name: String!
    num_items: Int!,
    total: String!
}

type DashboardSearchTerm {
    search_term: String!
    results: Int!
    uses: Int!
}

type DashboardChartPoint {
    x: String!
    y: Int!
}

type DashboardChart {
    label: String!
    points: [DashboardChartPoint!]!
    period: String!
}

type DashboardTotals {
    revenue: String!
    tax: String!
    shipping: String!
    quantity: Int!
}

type DashboardCustomer {
    name: String!
    orders: Int!
    average: String!
    total: String!
}

type Dashboard {
    sales: DashboardSales! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard\\Sales")
    last_orders: [DashboardLastOrder!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard\\LastOrders")
    last_search_terms: [DashboardSearchTerm!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard\\SearchTerms\\Last")
    top_search_terms: [DashboardSearchTerm!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard\\SearchTerms\\Top")
    orders_chart(period: String): DashboardChart! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard\\Chart\\Orders")
    revenue_chart(period: String): DashboardChart! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard\\Chart\\Revenue")
    totals(period: String): DashboardTotals! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard\\Totals")
    customers_newest: [DashboardCustomer!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard\\CustomersNewest")
    customers_most: [DashboardCustomer!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard\\CustomersMost")
}

type ConfigurationSection {
    path: String!
    label: String!
}

type ConfigurationTab {
    label: String!
    sections: [ConfigurationSection!]!
}

type ConfigurationOption {
    label: String!
    value: String
}

type ConfigurationField {
    label: String!
    type: String!
    comment: String
    options: [ConfigurationOption!]!
    value: String
    inherit: Boolean!
    show_inherit: Boolean!
    inherit_label: String!
    path: String!
}

type ConfigurationGroup {
    label: String!
    fields: [ConfigurationField!]!
}

enum CacheStatus {
    Disabled
    Enabled
    Invalidated
}

type CacheType {
    id: String!
    cache_type: String!
    description: String!
    tags: String!
    status: CacheStatus!
}

enum IndexerStatus {
    working
    valid
    invalid
}

type Indexer {
    title: String!
    description: String!
    is_scheduled: Boolean!
    status: IndexerStatus!
    schedule_status: String!
    updated: String!
}

enum ScopeType {
    default
    websites
    groups
    stores
}

type Scope {
    name: String!
    type: ScopeType!
    scope_id: Int
    disabled: Boolean!
    children: [Scope!]!
}

type Query {
    dashboard: Dashboard! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Dashboard")
    configurationTabs(scope_type: ScopeType): [ConfigurationTab!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Configuration\\Tabs")
    configurationSection(section: String!, scope_type: ScopeType, scope_id: Int): [ConfigurationGroup!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Configuration\\Section")
    configurationScopes: [Scope!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Configuration\\Scopes")
    cacheTypes: [CacheType!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Cache\\Types")
    indexers: [Indexer!]! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Indexer\\Indexers")
}

type Mutation {
    generateAdminToken(username: String!, password: String!): String! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\GenerateAdminToken")
    restoreConfiguration(path: String!): String @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Configuration\\RestoreConfiguration")
    saveConfiguration(path: String!, value: String!): Boolean! @resolver(class: "Danslo\\Velvet\\Model\\Resolver\\Configuration\\SaveConfiguration")
}
